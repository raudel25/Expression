@using Expression.Expressions
@using BigNum
@using Expression.Arithmetics

<div class="suite">
    <div class="build">
        @if (_action == Actions.Build)
        {
            <div style="justify-self: flex-end">
                <button class="btn btn-dark" @onclick="() => _action = Actions.None">Back</button>
            </div>

            <div style="margin-top: 20px">
                <Build Functions="_functions" ArithmeticExp="ArithmeticExp" Changed="NewExp"></Build>
            </div>
        }
        else
        {
            @if (_action == Actions.EvaluativeFunc)
            {
                <div style="justify-self: flex-end">
                    <button class="btn btn-dark" @onclick="() => _action = Actions.Build">New</button>
                </div>

                <EvalFunc Eval="EvalFunc" ArithmeticExp="ArithmeticExp"
                          Variables="Variables()">
                </EvalFunc>
            }
            else
            {
                <div style="height: 40px">
                    <button class="btn btn-dark" @onclick="() => _action = Actions.Build">New</button>
                </div>
            }
        }

    </div>

    <div class="math">
        <div class="nav-exp">
            @if (_ind != 0)
            {
                <button class="btn btn-light" @onclick="() => { _ind--; _action = Actions.None; }">Previous</button>
            }
            @if (_ind != _functions.Count - 1 && _functions.Count != 0)
            {
                <button class="btn btn-light" aria-label="Next" @onclick="() => { _ind++; _action = Actions.None; }">
                    Next
                </button>
            }
        </div>


        @if (_functions.Count != 0)
        {
            <div class="show-exp">
                <ShowExp Function="_functions[_ind]"></ShowExp>
            </div>

            <div class="options">
                <button class="btn btn-dark" @onclick="() => DecideVariables(Actions.Derivative)">Derivative</button>
                <button class="btn btn-dark" @onclick="() => DecideVariables(Actions.Taylor)">Taylor</button>
                <button class="btn btn-dark" @onclick="() => DecideVariables(Actions.Evaluative)">Evaluate</button>
                <button class="btn btn-dark" @onclick="() => DecideVariables(Actions.EvaluativeFunc)">Function</button>
            </div>
        }

        <div class="show-actions">
            @if (_action == Actions.Derivative)
            {
                <Derivative Function="_functions[_ind]" Derv="Derivative"></Derivative>
            }
            @if (_action == Actions.Evaluative)
            {
                <EvalVarible Variables="Variables()"
                             Eval="Eval" Big="Big" Message="Enter the variables values">
                </EvalVarible>
            }
            @if (_action == Actions.Taylor)
            {
                <Taylor Variables="Variables()"
                        PolTaylor="Taylor" Big="Big">
                </Taylor>
            }
            @if (_action == Actions.Result)
            {
                <div style="display: grid;justify-self: center;">
                    <div style="font-size:20px">
                        <ShowExp Function="_result"></ShowExp>
                    </div>
                    <div style="justify-self: center">
                        <button class="btn btn-dark" @onclick="Analyze">Analyze</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    private readonly List<Function<RealNumbers>> _functions = new();

    private int _ind;

    private static readonly BigNumMath Big = new(6, 9);

    private static readonly ArithmeticExp<RealNumbers> ArithmeticExp = new(new BigNumExp(Big));

    private enum Actions
    {
        None,
        Derivative,
        Taylor,
        Evaluative,
        EvaluativeFunc,
        Build,
        Result
    }

    private Actions _action;
    private Function<RealNumbers> _result = null!;

    private List<char> Variables() => Function<RealNumbers>.VariablesToExpression(_functions[_ind]);

    private void DecideVariables(Actions act)
    {
        var variables = Variables();

        if (Variables().Count == 0)
        {
            switch (act)
            {
                case Actions.Derivative:
                    Derivative('x');
                    break;

                case Actions.Evaluative:
                    Eval(new List<(char, RealNumbers)>());
                    break;

                case Actions.EvaluativeFunc:
                    EvalFunc(new List<(char, Function<RealNumbers>)>());
                    break;

                case Actions.None:
                case Actions.Taylor:
                case Actions.Build:
                case Actions.Result:
                default:
                    Taylor(new List<(char, RealNumbers)>(), 0);
                    break;
            }

            return;
        }

        if (act == Actions.Derivative && Variables().Count == 1)
        {
            Derivative(variables[0]);
            return;
        }

        _action = act;
    }

    private void Derivative(char variable)
    {
        _result = Function<RealNumbers>.Reduce(_functions[_ind].Derivative(variable));

        _action = Actions.Result;
        StateHasChanged();
    }

    private void Eval(List<(char,RealNumbers)> eval)
    {
        _result = ArithmeticExp.NumberExpression(_functions[_ind].Evaluate(eval));

        _action = Actions.Result;
        StateHasChanged();
    }

    private void EvalFunc(List<(char,Function<RealNumbers>)> eval)
    {
        _result = Function<RealNumbers>.Reduce(_functions[_ind].EvaluateExpression(eval));

        _action = Actions.Result;
        StateHasChanged();
    }

    private void Taylor(List<(char,RealNumbers)> eval, int cant)
    {
        var taylor = new Taylor<RealNumbers>(_functions[_ind], eval, cant);
        _result = Function<RealNumbers>.Reduce(taylor.ExpressionResult);

        _action = Actions.Result;
        StateHasChanged();
    }

    private void Analyze()
    {
        _functions.Add(_result);
        _ind = _functions.Count - 1;
        _action = Actions.None;
    }

    private void NewExp()
    {
        _action = Actions.None;
        _ind = _functions.Count - 1;
        StateHasChanged();
    }

}