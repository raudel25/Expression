@using Expression.Expressions
@using BigNum
@using Expression.Arithmetics

<h3>Function Analize</h3>

<button @onclick="() => { Ind[0] = Ind[0] - 1 >= 0 ? Ind[0] - 1 : Ind[0]; _action = Actions.None; }">P</button>
<button @onclick="() => { Ind[0] = Ind[0] + 1 < Functions.Count ? Ind[0] + 1 : Ind[0];_action = Actions.None; }">N</button>

<div>
    <label>@Functions[Ind[0]].ToString()</label>
</div>

<div>
    <button @onclick="() => { _action = Actions.Derivative; _result = null;}">dy/dx</button>
    <button>Taylor</button>
    <button @onclick="() => { _action = Actions.Evaluative; _result = null;}">Evaluate</button>
</div>

@if (_action == Actions.Derivative)
{
    <Derivative Function="Functions[Ind[0]]" Derv="Derivative"></Derivative>
}
@if (_action == Actions.Evaluative)
{
    <EvalVarible Variables="Function<RealNumbers>.VariablesToExpression(Functions[0])" Eval="Eval"></EvalVarible>
}
@if (_result is not null)
{
    <div>
        <label>@_result.ToString()</label>
    </div>
}

@code {

    [Parameter]
    public List<Function<RealNumbers>> Functions { get; set; }

    [Parameter]
    public List<int> Ind { get; set; }
    
    [Parameter]
    public BigNumMath Big { get; set; }
    
    [Parameter]
    public  ArithmeticExp<RealNumbers> ArithmeticExp { get; set; }


    private enum Actions
    {
        None,
        Derivative,
        Taylor,
        Evaluative,
    }

    private Actions _action = Actions.None;
    private Function<RealNumbers>? _result;

    private void Derivative(char variable)
    {
        _result = Functions[Ind[0]].Derivative(variable);
        
        _action = Actions.None;
        StateHasChanged();
    }

    private void Eval(double[] values)
    {
        var variables = Function<RealNumbers>.VariablesToExpression(Functions[Ind[0]]);
        var eval = new List<(char,RealNumbers)>(variables.Count);
        eval.AddRange(variables.Select((t, i) => (t,Big.ConvertToRealNumbers(values[i]))));

        _result = ArithmeticExp.NumberExpression(Functions[Ind[0]].Evaluate(eval));

        _action = Actions.None;
        StateHasChanged();
    }

}