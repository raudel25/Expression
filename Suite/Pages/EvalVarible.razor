@using BigNum
@using Expression.Expressions

<div class="input-group">
    @foreach (var (value,index) in _variables)
    {
        if (index == _ind)
        {
            <span class="input-group-text">@Equal(value)</span>
            <input class="form-control" type="number" @bind="@_values[index]"/>
        }
    }

    @if (_ind != 0)
    {
        <button class="input-group-text" @onclick="() => _ind--">Previous</button>
    }

    <button class="input-group-text" @onclick="Next">
        @if (_ind == Variables.Count - 1)
        {
            <span>Accept</span>
        }
        else
        {
            <span>Next</span>;
        }
    </button>
</div>

@code {

    [Parameter]
    public List<char> Variables { get; set; } = null!;

    [Parameter]
    public Action<List<(char,RealNumbers)>> Eval { get; set; } = null!;

    [Parameter]
    public BigNumMath Big { get; set; } = null!;

    private List<(char,int)> _variables = null!;

    private double[] _values = null!;

    private int _ind;

    private string Equal(char s) => $"{s} = ";

    protected override void OnInitialized()
    {
        _variables = new List<(char, int)>(Variables.Count);
        _values = new double[Variables.Count];

        for (var i = 0; i < Variables.Count; i++)
        {
            _variables.Add((Variables[i],i));
        }
    }

    private void Next()
    {
        if (_ind < Variables.Count - 1)
        {
            _ind++;
            return;
        }

        var eval = new List<(char,RealNumbers)>(Variables.Count);
        eval.AddRange(Variables.Select((t, i) => (t,Big.ConvertToRealNumbers(_values[i]))));

        Eval(eval);
    }

}