@using BigNum
@using Expression.Arithmetics
@using Expression.Expressions

<div style="display: grid">
    @foreach (var (value,index) in _variables)
    {
        if (index == _ind)
        {
            <div style="justify-self: center; margin: 10px;">
                <span>@Info(value)</span>
            </div>

            if (_values[_ind].Count != 0)
            {
                <ShowExp Function="_values[_ind][^1]"></ShowExp>
            }
            else
            {
                if (_firstVariable[_ind])
                {
                    <div class="alert alert-danger h-50">
                        @InfoDanger(value)
                    </div>
                }
            }

            <Build Functions="_values[_ind]" ArithmeticExp="ArithmeticExp" Changed="StateHasChanged"
                   @key="_ind" @ref="_builds[_ind]">
            </Build>
        }
    }

    <div style="justify-self: center; margin: 10px;">
        @if (_ind != 0)
        {
            <button class="btn btn-light" @onclick="() => _ind--">Previous</button>
        }

        <button class="btn btn-light" @onclick="Next">
            @if (_ind == Variables.Count - 1)
            {
                <span>Accept</span>
            }
            else
            {
                <span>Next</span>
            }
        </button>
    </div>
</div>

@code {

    [Parameter]
    public List<char> Variables { get; set; } = null!;

    [Parameter]
    public Action<List<(char,Function<RealNumbers>)>> Eval { get; set; } = null!;

    [Parameter]
    public ArithmeticExp<RealNumbers> ArithmeticExp { get; set; } = null!;

    private List<(char,int)> _variables = null!;

    private List<Function<RealNumbers>>[] _values = null!;

    private int _ind;

    private bool[] _firstVariable = null!;

    private Build[] _builds = null!;

    private string Info(char s) => $"Introduce the function for variable {s}";

    private string InfoDanger(char s) => $"There is not value for {s}";

    protected override void OnInitialized()
    {
        _variables = new List<(char, int)>(Variables.Count);
        _values = new List<Function<RealNumbers>>[Variables.Count];
        _firstVariable = new bool[Variables.Count];
        _builds = new Build[Variables.Count];

        for (var i = 0; i < Variables.Count; i++)
        {
            _variables.Add((Variables[i],i));
            _values[i] = new List<Function<RealNumbers>>();
        }
    }

    private void Next()
    {
        _firstVariable[_ind] = true;

        if (_ind < Variables.Count - 1)
        {
            _builds[_ind].AddFunction();
            if (_values[_ind].Count == 0)
                return;
            _ind++;
            return;
        }

        _builds[^1].AddFunction();
        if (_values[^1].Count == 0)
            return;


        var eval = new List<(char,Function<RealNumbers>)>(Variables.Count);
        eval.AddRange(Variables.Select((t, i) => (t,_values[i][^1])));

        Eval(eval);
    }

}